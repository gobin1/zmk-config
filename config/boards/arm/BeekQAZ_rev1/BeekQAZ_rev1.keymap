#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>

#define DEFAULT 	0
#define NUMSYM 		1
#define NAV		2	
#define FUNC		3
#define MISC		4

/ {
    behaviors {
        alt_tab: alt_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_TAB";
            #binding-cells = <0>;
            bindings = <&lt NAV A>, <&kp TAB>;
            mods = <(MOD_LALT|MOD_RALT|MOD_LGUI)>;
            keep-mods = <(MOD_LALT|MOD_LGUI)>;
        };
	&mt {
    	    quick-tap-ms = <125>;
	};
    };
};

/ {
	combos {
	compatible = "zmk,combos";
		combo_tab {
			timeout-ms = <27>;
			key-positions = <10 11>;
			bindings = <&kp TAB>;
		};
		combo_bpc {
			timeout-ms = <27>;
			key-positions = <16 17>;
			bindings = <&kp BSPC>;
		};
		combo_enter {
			timeout-ms = <27>;
			key-positions = <18 19>;
			bindings = <&kp ENTER>;
		};
		combo_media_prev {
			timeout-ms = <27>;
			key-positions = <1 2>;
			layers = <2>;
			bindings = <&kp C_PREV>;
		};
		combo_media_next {
			timeout-ms = <27>;
			key-positions = <2 3>;
			layers = <2>;
			bindings = <&kp C_NEXT>;
		};
		combo_misc_layer {
			timeout-ms = <27>;
			key-positions = <29 30>;
			layers = <0>;
			bindings = <&mo MISC>;
		};
    };
};

/ {
	keymap {
		compatible = "zmk,keymap";
		
		default_layer {
			bindings = <
	&mt LCTRL Q      &kp W         &kp E         &kp R         &kp T            &kp Y            &kp U            &kp I            &kp O            &kp P
	&alt_tab         &kp S         &kp D         &kp F         &kp G            &kp H            &kp J            &kp K            &kp L            &kp SQT
	&mt LSHIFT Z     &kp X         &kp C         &kp V         &kp B            &kp N            &kp M            &kp COMMA        &mt RSHIFT DOT         
    &mt LALT ESC         &kp LGUI                                       &lt NUMSYM SPACE                                               &mt RALT SEMI    &mt RCTRL FSLH   
			>;
		};
		numsym_layer {
			bindings = <
	&kp N1           &kp N2        &kp N3        &kp N4        &kp N5           &kp N6           &kp N7           &kp N8           &kp N9           &kp N0
	&kp F1           &kp F2        &kp F3        &kp F4        &kp F5           &kp F6           &kp MINUS        &kp EQUAL        &kp LBKT         &kp RBKT
	&mt LSHIFT F7           &kp F8        &kp F9        &kp F10       &kp F11          &kp F12          &trans           &trans           &trans
    &trans           &trans                                         &trans                                                         &kp GRAVE        &kp BSLH   
			>;
		};
		nav_layer {
			bindings = <
	&trans           &kp C_VOL_DN   &kp C_VOL_UP  &kp C_PP      &trans          &kp HOME         &kp PG_UP        &trans           &kp PSCRN        &kp BSPC
	&trans           &trans         &kp DEL       &trans        &trans          &kp LEFT         &kp DOWN         &kp UP           &kp RIGHT        &trans
	&trans           &trans         &kp CAPS      &trans        &trans          &kp END          &kp PG_DN        &trans           &kp ENTER        
    &trans           &mo FUNC                                       &trans                                                         &trans           &trans   
			>;
		};
		func_layer {
			bindings = <
	&trans           &trans        &kp UP           &trans         &trans          &kp N7           &kp N8          &kp N9            &trans           &trans
	&trans           &kp LEFT      &kp DOWN         &kp RIGHT      &trans          &kp N4           &kp N5          &kp N6            &trans           &trans
	&trans           &trans        &trans        &trans         &trans          &kp N1           &kp N2          &kp N3            &trans           
    &trans           &trans                                         &kp N0                                                          &trans          &trans   
			>;
		};
		misc_layer {
			bindings = <
	&bootloader      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2   &bt BT_SEL 3    &bt BT_SEL 4     &trans          &trans            &trans         &reset 
	&trans           &trans        &trans        &trans         &trans          &trans           &trans          &trans            &trans         &ext_power EP_TOG
	&trans           &trans        &trans        &trans         &trans          &trans           &trans          &trans            &trans        
    &trans           &trans                                         &trans                                                          &bt BT_NXT       &bt BT_CLR   
			>;
		};
	};


};
